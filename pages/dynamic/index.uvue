<template>
	<!-- 页面级滚动：根节点 scroll-view -->
	<scroll-view class="page-scroll">
		<!-- 游客模式提示 -->
		<view v-if="!isLoggedIn" class="guest-banner">
			<text class="guest-text">👋 欢迎！您正在以游客身份浏览，登录后可查看完整考试列表</text>
			<button class="login-btn" @tap="login">登录</button>
		</view>

		<!-- 统计看板 -->
		<!-- <view class="stats-dashboard">
			<view class="stat-card">
				<text class="stat-number">{{ statistics.totalExams }}</text>
				<text class="stat-label">总考试</text>
			</view>
			<view class="stat-card active">
				<text class="stat-number">{{ statistics.activeExams }}</text>
				<text class="stat-label">进行中</text>
			</view>
			<view class="stat-card upcoming">
				<text class="stat-number">{{ statistics.upcomingExams }}</text>
				<text class="stat-label">即将开始</text>
			</view>
			<view class="stat-card ended">
				<text class="stat-number">{{ statistics.endedExams }}</text>
				<text class="stat-label">已结束</text>
			</view>
		</view> -->

		<view class="exam-main">
			<!-- 我的考试（登录后显示） -->
			<view v-if="isLoggedIn" class="section">
				<text class="section-title">我的考试</text>
				<view class="exam-list">
					<view v-if="myExams.length === (0 as number)" class="empty">
						<text class="empty-text">暂无考试安排</text>
					</view>
					<view class="exam-card" v-for="item in myExams" :key="item._id">
						<view class="card-header">
							<text class="card-title">{{ item.title }}</text>
							<text :class="['card-status', 'status-' + item.status]">
								{{ ExamStatusTextMap[item.status] }}
							</text>
						</view>

						<view class="card-info">
							<view class="info-item">
								<text class="info-icon"></text>
								<text>{{ item.start_time }} - {{ item.end_time }}</text>
							</view>
							<view class="info-item">
								<text class="info-icon"></text>
								<text class="info-text">{{ item.questions }}题 · 总分{{ item.totalScore }}分</text>
							</view>
						</view>

						<text class="card-desc">{{ item.description }}</text>

						<view class="card-footer">
							<text class="card-duration">{{ item.duration }}</text>
							<button :class="['start-btn', item.status === (2 as number) ? 'disabled' : '']"
								:disabled="item.status === (2 as number)">
								{{ item.status === (2 as number) ? '已结束' : item.status === (0 as number)  ? '未开始' : '开始考试' }}
							</button>
						</view>
					</view>
				</view>
			</view>

			<!-- 在线考试（游客模式显示随机3条） -->
			<view class="section">
				<text class="section-title">在线考试</text>
				<view class="exam-list">
					<view v-if="randomExams.length === (0 as number)" class="empty">
						<text class="empty-text">暂无考试信息</text>
					</view>
					<view class="exam-card" v-for="item in randomExams" :key="item._id">
						<view class="card-header">
							<text class="card-title">{{ item.title }}</text>
							<text :class="['card-status', 'status-' + item.status]">
								{{ ExamStatusTextMap[item.status] }}
							</text>
						</view>

						<view class="card-info">
							<view class="info-item">
								<text class="info-icon"></text>
								<text>{{ item.start_time }} - {{ item.end_time }}</text>
							</view>
							<view class="info-item">
								<text class="info-icon"></text>
								<text class="info-text">{{ item.questions }}题 · 总分{{ item.totalScore }}分</text>
							</view>
						</view>

						<text class="card-desc">{{ item.description }}</text>
					</view>
				</view>
			</view>
		</view>
	</scroll-view>
</template>

<script setup lang="uts">
	import { ref, computed, onMounted } from 'vue'
	import { getMyExamList, getRandomExams, getMyExamStatistics } from '@/assets/api/exam.api.uts'
	import { ExamListReq, ExamListRow, ExamStatistics } from '@/assets/type/exam.types.uts'

	// 登录状态
	const isLoggedIn = ref(false)
	const userName = ref('游客')
	const ExamStatusTextMap = {
		"0": '未开始',
		"1": '进行中',
		"2": '已结束'
	}

	// 数据
	const myExams = ref<ExamListRow[]>([])
	const randomExams = ref<ExamListRow[]>([])
	const statistics = ref<ExamStatistics>({
		totalExams: 0,
		activeExams: 0,
		upcomingExams: 0,
		endedExams: 0,
		totalQuestions: 0,
		totalScore: 0
	})

	// 方法
	async function loadData() {
		try {
			// 加载统计数据
			const okCode : number = 200
			const statisticsRes = await getMyExamStatistics('')
			// console.log(statisticsRes);
			if (statisticsRes.code === okCode && statisticsRes.data !== null) {
				statistics.value = statisticsRes.data
			}

			// 加载我的考试
			const res = await getMyExamList({ user_id: '' })
			// console.log(res);
			if (res.code === okCode && res.data !== null) {
				myExams.value = res.data.rows
			}

			// 加载随机考试（游客模式）
			const randomRes = await getRandomExams(3)
			// console.log(randomRes);
			if (randomRes.code === okCode && randomRes.data !== null) {
				myExams.value = randomRes.data
			}

		} catch (error) {
			console.error('加载数据失败:', JSON.stringify(error))
			uni.showToast({ title: '加载数据失败', icon: 'error' })
		}
	}

	function login() {
	}

	function startExam(examId : number) {
		uni.navigateTo({ url: `/pages/dynamic/answer?id=${examId}` })
	}

	// 生命周期
	onMounted(() => {
		loadData()
	})
</script>

<style>
	/* ===== appx 兼容样式 ===== */
	.page-scroll {
		display: flex;
		flex-direction: column;
		background-color: #f9f9ff;
		flex: 1;
	}

	/* === 游客提示横幅 === */
	.guest-banner {
		display: flex;
		flex-direction: row;
		justify-content: space-between;
		align-items: center;
		padding: 24rpx 32rpx;
		background-color: #fff3cd;
		border-bottom: 1rpx solid #ffeaa7;
	}

	.guest-text {
		font-size: 28rpx;
		color: #856404;
		flex: 1;
	}

	.login-btn {
		padding: 12rpx 24rpx;
		background-color: #3a397a;
		color: #ffffff;
		border-radius: 8rpx;
		font-size: 24rpx;
		margin-left: 20rpx;
	}

	/* === 统计看板 === */
	.stats-dashboard {
		display: flex;
		flex-direction: row;
		justify-content: space-between;
		padding: 32rpx;
		background-color: #ffffff;
		margin-bottom: 24rpx;
	}

	.stat-card {
		display: flex;
		flex-direction: column;
		align-items: center;
		justify-content: center;
		padding: 24rpx;
		border-radius: 16rpx;
		background-color: #f8f9fa;
		flex: 1;
		margin: 0 8rpx;
	}

	.stat-card.active {
		background-color: #e6f7e6;
	}

	.stat-card.upcoming {
		background-color: #fff8e1;
	}

	.stat-card.ended {
		background-color: #fbe9e7;
	}

	.stat-number {
		font-size: 36rpx;
		font-weight: 700;
		color: #3a397a;
		margin-bottom: 8rpx;
	}

	.stat-label {
		font-size: 24rpx;
		color: #666666;
	}

	/* === 主体 === */
	.exam-main {
		padding: 30rpx;
	}

	.section {
		margin-bottom: 48rpx;
	}

	.section-title {
		font-size: 36rpx;
		font-weight: 700;
		color: #3a397a;
		margin-bottom: 24rpx;
	}

	/* === 考试卡片 === */
	.exam-list {
		display: flex;
		flex-direction: column;
	}

	.empty {
		padding: 64rpx;
	}

	.empty-text {
		text-align: center;
		color: #777777;
		font-size: 28rpx;
	}

	.exam-card {
		padding: 32rpx;
		margin-bottom: 24rpx;
		background-color: #ffffff;
		border-left: 8rpx solid #3a397a;
		border-radius: 16rpx;
		box-shadow: 0 2rpx 8rpx rgba(0, 0, 0, 0.1);
	}

	.card-header {
		display: flex;
		flex-direction: row;
		justify-content: space-between;
		align-items: center;
		margin-bottom: 16rpx;
	}

	.card-title {
		font-size: 32rpx;
		font-weight: 700;
		color: #3a397a;
		flex: 1;
		margin-right: 16rpx;
	}

	.card-status {
		padding: 4rpx 12rpx;
		border-radius: 20rpx;
		font-size: 24rpx;
		white-space: nowrap;
	}

	.status-active {
		background-color: #e6f7e6;
		color: #2e7d32;
	}

	.status-upcoming {
		background-color: #fff8e1;
		color: #ff8f00;
	}

	.status-ended {
		background-color: #fbe9e7;
		color: #d84315;
	}

	.card-info {
		margin-bottom: 16rpx;
	}

	.info-item {
		display: flex;
		flex-direction: row;
		align-items: center;
		margin-bottom: 8rpx;
	}

	.info-text {
		font-size: 28rpx;
		color: #777777;
	}

	.info-icon {
		margin-right: 8rpx;
		font-size: 28rpx;
	}

	.card-desc {
		font-size: 28rpx;
		color: #777777;
		margin-bottom: 24rpx;
		line-height: 1.5;
	}

	.card-footer {
		display: flex;
		flex-direction: row;
		justify-content: space-between;
		align-items: center;
	}

	.card-duration {
		font-size: 28rpx;
		color: #777777;
	}

	.start-btn {
		padding: 16rpx 32rpx;
		background-color: #3a397a;
		color: #ffffff;
		border-radius: 8rpx;
		font-size: 28rpx;
		border: none;
	}

	.start-btn.disabled {
		background-color: #cccccc;
	}
</style>