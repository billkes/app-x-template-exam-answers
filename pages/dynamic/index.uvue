<template>
	<!-- 页面级滚动：根节点 scroll-view -->
	<scroll-view class="page-scroll">

		<!-- 游客模式提示面板 -->
		<view v-if="!isLoggedIn" class="guest-banner">
			<text class="guest-text">👋 欢迎！您正在以游客身份浏览，登录后可查看完整考试列表</text>
			<view class="guest-actions">
				<button class="login-btn" @tap="openLoginModal">登录</button>
				<button class="register-btn" @tap="openRegisterModal">注册</button>
			</view>
		</view>

		<!-- 登录注册模态框 -->
		<view v-if="showAuthModal" class="auth-modal">
			<view class="auth-panel">
				<view class="auth-header">
					<text class="auth-title">{{ isLoginMode ? '登录' : '注册' }}</text>
					<text class="close-btn" @tap="closeAuthModal">×</text>
				</view>

				<!-- 登录表单 -->
				<view v-if="isLoginMode" class="auth-form">
					<view class="form-item">
						<text class="form-label">手机号</text>
						<input v-model="loginForm.mobile" class="form-input" placeholder="请输入手机号" maxlength="20" />
					</view>
					<view class="form-item">
						<text class="form-label">密码</text>
						<input v-model="loginForm.password" class="form-input" type="password" placeholder="请输入密码"
							maxlength="20" />
					</view>
					<button class="auth-submit" @tap="handleLogin" :disabled="loginLoading">
						{{ loginLoading ? '登录中...' : '登录' }}
					</button>
				</view>

				<!-- 注册表单 -->
				<view v-else class="auth-form">
					<view class="form-item">
						<text class="form-label">用户名</text>
						<input v-model="registerForm.username" class="form-input" placeholder="请输入用户名" maxlength="20" />
					</view>
					<view class="form-item">
						<text class="form-label">密码</text>
						<input v-model="registerForm.password" class="form-input" type="password" placeholder="请输入密码"
							maxlength="20" />
					</view>
					<view class="form-item">
						<text class="form-label">手机号</text>
						<input v-model="registerForm.mobile" class="form-input" placeholder="请输入手机号" maxlength="11" />
					</view>
					<button class="auth-submit" @tap="handleRegister" :disabled="registerLoading">
						{{ registerLoading ? '注册中...' : '注册' }}
					</button>
				</view>

				<view class="auth-switch">
					<text @tap="switchAuthMode" class="auth-switch-text">
						{{ isLoginMode ? '没有账号？立即注册' : '已有账号？立即登录' }}
					</text>
				</view>
			</view>
		</view>

		<!-- 用户基本信息面板 -->
		<view v-if="isLoggedIn && currentUser !== null" class="user-info-panel">
			<view class="user-avatar">
				<view class="avatar-circle">
					<text class="avatar-text">{{ currentUser!.username.charAt(0) }}</text>
				</view>
			</view>
			<view class="user-details">
				<text class="username">{{ currentUser!.username }}</text>
				<text class="user-mobile">{{ currentUser!.mobile }}</text>
				<text class="user-id">ID: {{ currentUser!._id.slice(-6) }}</text>
			</view>
			<view class="user-actions">
				<button class="logout-btn" @tap="handleLogout">退出登录</button>
			</view>
		</view>

		<!-- 考试统计看板 -->
		<view class="stats-dashboard" v-if="isLoggedIn">
			<view class="stat-card">
				<text class="stat-number">{{ statistics.totalExams }}</text>
				<text class="stat-label">总考试</text>
			</view>
			<view class="stat-card active">
				<text class="stat-number">{{ statistics.activeExams }}</text>
				<text class="stat-label">进行中</text>
			</view>
			<view class="stat-card upcoming">
				<text class="stat-number">{{ statistics.upcomingExams }}</text>
				<text class="stat-label">即将开始</text>
			</view>
			<view class="stat-card ended">
				<text class="stat-number">{{ statistics.endedExams }}</text>
				<text class="stat-label">已结束</text>
			</view>
		</view>

		<!-- 加载状态 -->
		<view v-if="myExamsLoading || randomExamsLoading" class="loading">
			<text>{{ myExamsLoading ? '加载我的考试中...' : '加载在线考试中...' }}</text>
		</view>

		<view class="exam-main">
			<!-- 我的考试（登录后显示） -->
			<view v-if="isLoggedIn" class="section">
				<text class="section-title">我的考试</text>
				<view class="exam-list">
					<view v-if="myExamsLoading" class="loading">
						<text>加载中...</text>
					</view>
					<view v-else-if="myExams.length === (0 as number)" class="empty">
						<text class="empty-text">暂无考试安排</text>
					</view>
					<view class="exam-card" v-for="item in myExams" :key="item._id">
						<view class="card-header">
							<text class="card-title">{{ item.title }}</text>
							<text :class="['card-status', 'status-' + item.status]">
								{{ ExamStatusTextMap[item.status] }}
							</text>
						</view>

						<view class="card-info">
							<view class="info-item">
								<text class="info-icon"></text>
								<text>{{ item.start_time }} - {{ item.end_time }}</text>
							</view>
							<view class="info-item">
								<text class="info-icon"></text>
								<text class="info-text">{{ item.questions }}题 · 总分{{ item.totalScore }}分</text>
							</view>
						</view>

						<text class="card-desc">{{ item.description }}</text>

						<view class="card-footer">
							<text class="card-duration">{{ item.duration }}</text>
							<button :class="['start-btn', item.status === (2 as number) ? 'disabled' : '']"
								:disabled="item.status === (2 as number)" @tap="startExam(item._id)">
								{{ item.status === (2 as number) ? '已结束' : item.status === (0 as number)  ? '未开始' : '开始考试' }}
							</button>
						</view>
					</view>
				</view>
			</view>

			<!-- 在线考试（游客模式显示随机3条） -->
			<view class="section">
				<text class="section-title">在线考试</text>
				<view class="exam-list">
					<view v-if="randomExamsLoading" class="loading">
						<text class="loading-text">加载中...</text>
					</view>
					<view v-else-if="randomExams.length === (0 as number)" class="empty">
						<text class="empty-text">暂无考试信息</text>
					</view>
					<view class="exam-card" v-for="item in randomExams" :key="item._id">
						<view class="card-header">
							<text class="card-title">{{ item.title }}</text>
							<text :class="['card-status', 'status-' + item.status]">
								{{ ExamStatusTextMap[item.status] }}
							</text>
						</view>

						<view class="card-info">
							<view class="info-item">
								<text class="info-icon"></text>
								<text>{{ item.start_time }} - {{ item.end_time }}</text>
							</view>
							<view class="info-item">
								<text class="info-icon"></text>
								<text class="info-text">{{ item.questions }}题 · 总分{{ item.totalScore }}分</text>
							</view>
						</view>

						<text class="card-desc">{{ item.description }}</text>
					</view>
				</view>
			</view>
		</view>
	</scroll-view>
</template>

<script setup lang="uts">
	import { ref, computed, onMounted } from 'vue'
	import { getMyExamList, getRandomExams, getMyExamStatistics } from '@/assets/api/exam.api.uts'
	import { loginUser, registerUser, getUserInfo } from '@/assets/api/user.api.uts'
	import { ExamListReq, ExamListRow, ExamStatistics } from '@/assets/type/exam.type.uts'
	import { UserRow, LoginResquest, RegisterResquest, LoginResponse } from '@/assets/type/user.type.uts'

	// 登录状态
	const okCode : number = 200
	const isLoggedIn = ref(false)
	const currentUser = ref<UserRow | null>(null)
	const userId = ref<string>('')
	const ExamStatusTextMap = {
		"0": '未开始',
		"1": '进行中',
		"2": '已结束'
	}

	// 数据
	const myExams = ref<ExamListRow[]>([])
	const randomExams = ref<ExamListRow[]>([])
	const statistics = ref<ExamStatistics>({
		totalExams: 0,
		activeExams: 0,
		upcomingExams: 0,
		endedExams: 0,
		totalQuestions: 0,
		totalScore: 0
	})

	// 登录注册相关
	const showAuthModal = ref(false)
	const isLoginMode = ref(true)
	const loginForm = ref<LoginResquest>({ mobile: '', password: '' })
	const registerForm = ref<RegisterResquest>({ username: '', password: '', mobile: '' })
	const loginLoading = ref(false)
	const registerLoading = ref(false)
	const myExamsLoading = ref(false)
	const randomExamsLoading = ref(false)

	// 方法
	async function loadData() {
		try {
			// 加载统计数据
			const statisticsRes = await getMyExamStatistics(userId.value)
			if (statisticsRes.code === okCode && statisticsRes.data !== null) {
				statistics.value = statisticsRes.data
			}

			// 加载我的考试（仅登录用户）
			if (isLoggedIn.value && userId.value !== '') {
				myExamsLoading.value = true
				const res = await getMyExamList({ user_id: userId.value })
				if (res.code === okCode && res.data !== null) {
					myExams.value = res.data
				}
				myExamsLoading.value = false
			}

			// 加载随机考试（游客模式）
			randomExamsLoading.value = true
			const randomRes = await getRandomExams(3)
			if (randomRes.code === okCode && randomRes.data !== null) {
				randomExams.value = randomRes.data
			}
			randomExamsLoading.value = false

		} catch (error) {
			console.error('加载数据失败:', JSON.stringify(error))
			uni.showToast({ title: '加载数据失败', icon: 'error' })
			myExamsLoading.value = false
			randomExamsLoading.value = false
		}
	}

	// 登录注册相关方法
	function openLoginModal() {
		isLoginMode.value = true
		showAuthModal.value = true
	}

	function openRegisterModal() {
		isLoginMode.value = false
		showAuthModal.value = true
	}

	function closeAuthModal() {
		showAuthModal.value = false
		loginForm.value = { mobile: '', password: '' } as LoginResquest
		registerForm.value = { username: '', password: '', mobile: '' } as RegisterResquest
	}

	function switchAuthMode() {
		isLoginMode.value = !isLoginMode.value
	}

	async function handleLogin() {
		if (loginForm.value.mobile === '' || loginForm.value.password === '') {
			uni.showToast({ title: '请填写完整信息', icon: 'none' })
			return
		}

		loginLoading.value = true
		let token : LoginResponse | null = null
		try {
			const res = await loginUser({
				mobile: loginForm.value.mobile,
				password: loginForm.value.password,
			})
			if (res.code === okCode && res.data !== null) {
				uni.showToast({ title: '登录成功', icon: 'success' })
				isLoggedIn.value = true
				userId.value = res.data.id
				token = res.data
				closeAuthModal()
			} else {
				uni.showToast({ title: res.message === null ? '登录失败' : res.message, icon: 'error' })
			}
		} catch (error) {
			uni.showToast({ title: '登录失败', icon: 'error' })
		} finally {
			loginLoading.value = false
		}

		// 保存登录信息到本地存储
		try {
			if (token !== null) {
				uni.setStorageSync('token', token)
			}
		} catch (error) {
			console.error('保存登录信息失败:', error)
		}

		try {
			if (token !== null) {
				const res1 = await getUserInfo(token.id)
				if (res1.code === okCode && res1.data !== null) {
					currentUser.value = res1.data
					const userInfo = res1.data
					uni.setStorageSync('userInfo', userInfo)
				}
			}
		} catch (error) {
			console.error('获取用户信息失败:', error)
		}
		await loadData()
	}

	async function handleRegister() {
		if (registerForm.value.username === '' || registerForm.value.password === '' || registerForm.value.mobile === '') {
			uni.showToast({ title: '请填写完整信息', icon: 'none' })
			return
		}

		registerLoading.value = true
		try {
			const res = await registerUser({
				username: registerForm.value.username,
				password: registerForm.value.password,
				mobile: registerForm.value.mobile,
			})
			if (res.code === okCode && res.data !== null) {
				uni.showToast({ title: '注册成功', icon: 'success' })
				// 注册成功后自动登录
				loginForm.value = { mobile: registerForm.value.mobile, password: registerForm.value.password } as LoginResquest
				isLoginMode.value = true
				registerForm.value = { username: '', password: '', mobile: '' } as RegisterResquest
			} else {
				uni.showToast({ title: res.message === null ? '注册失败' : res.message, icon: 'error' })
			}
		} catch (error) {
			uni.showToast({ title: '注册失败', icon: 'error' })
		} finally {
			registerLoading.value = false
		}
	}

	async function handleLogout() {
		isLoggedIn.value = false
		currentUser.value = null
		userId.value = ''
		myExams.value = []
		// 清除本地存储的登录信息
		try {
			uni.removeStorageSync('token')
			uni.removeStorageSync('userInfo')
		} catch (error) {
			console.error('清除本地存储失败:', error)
		}
		await loadData()
		uni.showToast({ title: '已退出登录', icon: 'success' })
	}

	function startExam(examId : string) {
		uni.navigateTo({ url: `/pages/dynamic/answer?id=${examId}` })
	}

	// 检查登录状态
	function checkLoginStatus() {
		try {
			const userInfo = uni.getStorageSync('userInfo')
			const token = uni.getStorageSync('token')
			if (userInfo === '' || token === '') {
				return
			}
			const newUserInfo = JSON.parse<UserRow>(JSON.stringify(userInfo))
			const newToken = JSON.parse<LoginResponse>(JSON.stringify(token))
			if (newToken !== null && newUserInfo !== null) {
				console.log(newUserInfo, newToken);
				currentUser.value = newUserInfo
				userId.value = newToken.id
				isLoggedIn.value = true
			}
		} catch (error) {
			console.error('读取本地存储失败:', error)
		}
	}

	// 生命周期
	onMounted(() => {
		checkLoginStatus()
		loadData()
	})
</script>

<style>
	/* ===== appx 兼容样式 ===== */
	.page-scroll {
		display: flex;
		flex-direction: column;
		background-color: #f9f9ff;
		flex: 1;
	}

	/* === 游客提示横幅 === */
	.guest-banner {
		padding: 24rpx 32rpx;
		background-color: #fff3cd;
		border-bottom: 1rpx solid #ffeaa7;
	}

	.guest-text {
		font-size: 28rpx;
		color: #856404;
		flex: 1;
	}

	.guest-actions {
		margin-top: 5px;
		display: flex;
		flex-direction: row;
	}

	.login-btn {
		background-color: #3a397a;
		color: #ffffff;
		border-radius: 8rpx;
		font-size: 24rpx;
		border: none;
		margin-right: 10px;
	}

	.register-btn {
		background-color: #28a745;
		color: #ffffff;
		border-radius: 8rpx;
		font-size: 24rpx;
		border: none;
	}

	/* === 用户基本信息面板 === */
	.user-info-panel {
		display: flex;
		flex-direction: row;
		align-items: center;
		padding: 32rpx;
		background-color: #ffffff;
		margin-bottom: 24rpx;
		border-radius: 16rpx;
		box-shadow: 0 2rpx 8rpx rgba(0, 0, 0, 0.1);
	}

	.user-avatar {
		margin-right: 24rpx;
	}

	.avatar-circle {
		width: 80rpx;
		height: 80rpx;
		border-radius: 40rpx;
		background-color: #3a397a;
		display: flex;
		align-items: center;
		justify-content: center;
	}

	.avatar-text {
		color: #ffffff;
		font-size: 32rpx;
		font-weight: bold;
	}

	.user-details {
		flex: 1;
	}

	.user-actions {
		margin-top: 2px;
	}

	.username {
		font-size: 32rpx;
		font-weight: bold;
		color: #333333;
		margin-bottom: 8rpx;
	}

	.user-mobile {
		font-size: 24rpx;
		color: #666666;
		margin-bottom: 4rpx;
	}

	.user-id {
		font-size: 20rpx;
		color: #999999;
	}

	.logout-btn {
		padding: 12rpx 24rpx;
		background-color: #dc3545;
		color: #ffffff;
		border-radius: 8rpx;
		font-size: 24rpx;
		border: none;
	}

	/* === 统计看板 === */
	.stats-dashboard {
		display: flex;
		flex-direction: row;
		justify-content: space-between;
		padding: 32rpx;
		background-color: #ffffff;
		margin-bottom: 24rpx;
	}

	.stat-card {
		display: flex;
		flex-direction: column;
		align-items: center;
		justify-content: center;
		padding: 24rpx;
		border-radius: 16rpx;
		background-color: #f8f9fa;
		flex: 1;
		margin: 0 8rpx;
	}

	.stat-card.active {
		background-color: #e6f7e6;
	}

	.stat-card.upcoming {
		background-color: #fff8e1;
	}

	.stat-card.ended {
		background-color: #fbe9e7;
	}

	.stat-number {
		font-size: 36rpx;
		font-weight: 700;
		color: #3a397a;
		margin-bottom: 8rpx;
	}

	.stat-label {
		font-size: 24rpx;
		color: #666666;
	}

	/* === 登录注册模态框 === */
	.auth-modal {
		position: fixed;
		top: 0;
		left: 0;
		right: 0;
		bottom: 0;
		background-color: rgba(0, 0, 0, 0.5);
		display: flex;
		align-items: center;
		justify-content: center;
		z-index: 1000;
	}

	.auth-panel {
		width: 80%;
		max-width: 600rpx;
		background-color: #ffffff;
		border-radius: 16rpx;
		padding: 40rpx;
	}

	.auth-header {
		display: flex;
		flex-direction: row;
		justify-content: space-between;
		align-items: center;
		margin-bottom: 40rpx;
	}

	.auth-title {
		font-size: 36rpx;
		font-weight: bold;
		color: #333333;
	}

	.close-btn {
		font-size: 48rpx;
		color: #999999;
	}

	.auth-form {
		margin-bottom: 32rpx;
	}

	.form-item {
		margin-bottom: 32rpx;
	}

	.form-label {
		font-size: 28rpx;
		color: #333333;
		margin-bottom: 12rpx;
	}

	.form-input {
		width: 100%;
		padding: 20rpx;
		border: 1rpx solid #e0e0e0;
		border-radius: 8rpx;
		font-size: 28rpx;
		background-color: #f8f9fa;
	}

	.auth-submit {
		width: 100%;
		padding: 8rpx 24rpx;
		background-color: #3a397a;
		color: #ffffff;
		border: none;
		border-radius: 8rpx;
		font-size: 32rpx;
		font-weight: bold;
	}

	.auth-switch {
		margin-top: 2px;
	}

	.auth-switch-text {
		text-align: center;
		color: #3a397a;
		font-size: 28rpx;
	}

	/* === 主体 === */
	.exam-main {
		padding: 30rpx;
	}

	.section {
		margin-bottom: 48rpx;
	}

	.section-title {
		font-size: 36rpx;
		font-weight: 700;
		color: #3a397a;
		margin-bottom: 24rpx;
	}

	/* === 考试卡片 === */
	.exam-list {
		display: flex;
		flex-direction: column;
	}

	.empty {
		padding: 64rpx;
	}

	.empty-text {
		text-align: center;
		color: #777777;
		font-size: 28rpx;
	}

	.exam-card {
		padding: 32rpx;
		margin-bottom: 24rpx;
		background-color: #ffffff;
		border-left: 8rpx solid #3a397a;
		border-radius: 16rpx;
		box-shadow: 0 2rpx 8rpx rgba(0, 0, 0, 0.1);
	}

	.card-header {
		display: flex;
		flex-direction: row;
		justify-content: space-between;
		align-items: center;
		margin-bottom: 16rpx;
	}

	.card-title {
		font-size: 32rpx;
		font-weight: 700;
		color: #3a397a;
		flex: 1;
		margin-right: 16rpx;
	}

	.card-status {
		padding: 4rpx 12rpx;
		border-radius: 20rpx;
		font-size: 24rpx;
		white-space: nowrap;
	}

	.status-active {
		background-color: #e6f7e6;
		color: #2e7d32;
	}

	.status-upcoming {
		background-color: #fff8e1;
		color: #ff8f00;
	}

	.status-ended {
		background-color: #fbe9e7;
		color: #d84315;
	}

	.card-info {
		margin-bottom: 16rpx;
	}

	.info-item {
		display: flex;
		flex-direction: row;
		align-items: center;
		margin-bottom: 8rpx;
	}

	.info-text {
		font-size: 28rpx;
		color: #777777;
	}

	.info-icon {
		margin-right: 8rpx;
		font-size: 28rpx;
	}

	.card-desc {
		font-size: 28rpx;
		color: #777777;
		margin-bottom: 24rpx;
		line-height: 1.5;
	}

	.card-footer {
		display: flex;
		flex-direction: row;
		justify-content: space-between;
		align-items: center;
	}

	.card-duration {
		font-size: 28rpx;
		color: #777777;
	}

	.start-btn {
		padding: 16rpx 32rpx;
		background-color: #3a397a;
		color: #ffffff;
		border-radius: 8rpx;
		font-size: 28rpx;
		border: none;
	}

	.start-btn.disabled {
		background-color: #cccccc;
	}

	/* === 加载状态 === */
	.loading {
		padding: 40rpx;
	}

	.loading-text {
		color: #999999;
		font-size: 28rpx;
		text-align: center;
	}
</style>