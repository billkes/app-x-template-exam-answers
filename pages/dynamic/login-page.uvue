<template>
	<scroll-view class="root">
		<view class="container">
			<!-- Logo 区域 -->
			<view class="logo-container">
				<text class="logo-text">考试答题模版</text>
			</view>

			<!-- 登录/注册表单 -->
			<view class="login-form">
				<!-- 切换登录/注册 -->
				<view class="tab-switch">
					<text class="tab-item" :class="{ active: !isRegister }" @tap="isRegister = false">登录</text>
					<text class="tab-item" :class="{ active: isRegister }" @tap="isRegister = true">注册</text>
				</view>

				<!-- 登录表单 -->
				<view v-if="!isRegister">
					<view class="form-group">
						<text class="form-label">学号/手机号</text>
						<view class="input-wrap">
							<text class="input-icon iconfont icon-user"></text>
							<input v-model="username" class="form-input" placeholder="请输入学号或手机号" type="text" />
						</view>
					</view>

					<view class="form-group">
						<text class="form-label">密码</text>
						<view class="input-wrap">
							<text class="input-icon iconfont" :class="showPwd ? 'icon-eye' : 'icon-eye-close'"
								@tap="showPwd = !showPwd"></text>
							<input v-model="password" class="form-input" placeholder="请输入密码" :password="!showPwd" />
						</view>
					</view>

					<view class="form-group" v-if="needCaptcha">
						<text class="form-label">验证码</text>
						<view class="input-wrap">
							<text class="input-icon iconfont icon-check-circle"></text>
							<input v-model="captcha" class="form-input" placeholder="请输入验证码" type="text" />
						</view>
					</view>

					<button class="login-button" @tap="handleLogin">
						<text>{{ loading ? '登录中...' : '登录' }}</text>
					</button>

					<view class="register-link-forgot">
						<view class="forgot">
							<text class="forgot-password" @tap="goForget">忘记密码?</text>
						</view>
					</view>
				</view>

				<!-- 注册表单 -->
				<view v-else>
					<view class="form-group">
						<text class="form-label">用户名 <text class="required">*</text></text>
						<view class="input-wrap">
							<text class="input-icon iconfont icon-user"></text>
							<input v-model="regUsername" class="form-input" placeholder="请输入用户名（数字+字母的3~20位字符）"
								type="text" />
						</view>
					</view>

					<view class="form-group">
						<text class="form-label">昵称</text>
						<view class="input-wrap">
							<text class="input-icon iconfont icon-user"></text>
							<input v-model="nickname" class="form-input" placeholder="请输入昵称" type="text" />
						</view>
					</view>

					<view class="form-group">
						<text class="form-label">设置密码 <text class="required">*</text></text>
						<view class="input-wrap">
							<text class="input-icon iconfont" :class="showRegPwd ? 'icon-eye' : 'icon-eye-close'"
								@tap="showRegPwd = !showRegPwd"></text>
							<input v-model="regPassword" class="form-input" placeholder="请输入6位数密码"
								:password="!showRegPwd" />
						</view>
					</view>

					<view class="form-group">
						<text class="form-label">重复密码 <text class="required">*</text></text>
						<view class="input-wrap">
							<text class="input-icon iconfont" :class="showRegPwd2 ? 'icon-eye' : 'icon-eye-close'"
								@tap="showRegPwd2 = !showRegPwd2"></text>
							<input v-model="regPassword2" class="form-input" placeholder="请重新输入密码"
								:password="!showRegPwd2" />
						</view>
					</view>

					<view class="form-group">
						<text class="form-label">验证码 <text class="required">*</text></text>
						<view class="input-wrap">
							<text class="input-icon iconfont icon-check-circle"></text>
							<input v-model="regCaptcha" class="form-input" placeholder="请输入验证码" type="text" />
						</view>
					</view>

					<button class="login-button" @tap="handleRegister">
						<text>{{ regLoading ? '注册中...' : '注册并登录' }}</text>
					</button>
				</view>
			</view>

			<!-- 隐私协议 -->
			<view class="privacy">
				<text class="privacy-text">登录即代表您同意我们的 </text>
				<text class="link privacy-text" @tap="goProtocol('user')">用户协议</text>
				<text class="privacy-text"> 和 </text>
				<text class="link privacy-text" @tap="goProtocol('privacy')">隐私政策</text>
			</view>
		</view>
	</scroll-view>
</template>

<script setup lang="uts">
	import { ref } from 'vue'

	const username = ref('')
	const password = ref('')
	const remember = ref(false)
	const showPwd = ref(false)
	const loading = ref(false)
	const needCaptcha = ref(false)
	const captcha = ref('')

	// 注册相关变量
	const isRegister = ref(false)
	const regUsername = ref('')
	const nickname = ref('')
	const regPassword = ref('')
	const regPassword2 = ref('')
	const regCaptcha = ref('')
	const showRegPwd = ref(false)
	const showRegPwd2 = ref(false)
	const regLoading = ref(false)

	// 导入uni-id-co云对象
	const uniIdCo = uniCloud.importObject("uni-id-co", { customUI: true })

	const handleLogin = () => {
		if (!username.value || !password.value) {
			uni.showToast({ title: '请输入账号密码', icon: 'none' })
			return
		}

		if (needCaptcha.value && captcha.value.length != 4) {
			uni.showToast({ title: '请输入验证码', icon: 'none' })
			return
		}

		loading.value = true

		const data = {
			"password": password.value,
			"captcha": captcha.value
		}

		let keyName = 'username'
		if (/^1\d{10}$/.test(username.value)) {
			keyName = "mobile"
		} else if (/@/.test(username.value)) {
			keyName = "email"
		}
		data[keyName] = username.value

		uni.showLoading({
			title: '登录中',
			mask: false
		})

		uniIdCo.login(data)
			.finally(() => {
				uni.hideLoading()
				loading.value = false
				captcha.value = ""
			})
			.then((e) => {
				console.log('登录成功', e)
				uni.showToast({ title: '登录成功', icon: 'success' })
				// 登录成功后的处理，比如跳转到首页
				setTimeout(() => {
					uni.switchTab({
						url: '/pages/index/index'
					})
				}, 1500)
			})
			.catch((err : any | null) => {
				const error = err as UniCloudError
				console.error(error)
				if (error.code == 'uni-id-captcha-required') {
					needCaptcha.value = true
					uni.showToast({
						title: '请输入验证码',
						icon: 'none',
						duration: 3000
					})
				} else {
					uni.showToast({
						title: error.message,
						icon: 'none',
						duration: 3000
					})
				}
			})
	}

	const handleRegister = () => {
		// 校验必填字段
		if (!regUsername.value) {
			uni.showToast({ title: '请输入用户名', icon: 'none' })
			return
		}

		if (!regPassword.value) {
			uni.showToast({ title: '请输入密码', icon: 'none' })
			return
		}

		if (!regPassword2.value) {
			uni.showToast({ title: '请重复输入密码', icon: 'none' })
			return
		}

		if (!regCaptcha.value) {
			uni.showToast({ title: '请输入验证码', icon: 'none' })
			return
		}

		// 校验用户名规则
		const usernameRegExp = new RegExp("^(?=.*[a-z])(?=.*\\d)[a-z\\d]{3,20}$")
		if (!usernameRegExp.test(regUsername.value)) {
			uni.showModal({
				content: "用户名由数字和小写字母的3-20个字符组成",
				showCancel: false,
				confirmText: "知道了"
			})
			return
		}

		// 校验密码强度
		if (regPassword.value.length < 6) {
			uni.showModal({
				content: "密码长度不能少于6位",
				showCancel: false,
				confirmText: "知道了"
			})
			return
		}

		// 校验密码一致性
		if (regPassword.value != regPassword2.value) {
			uni.showModal({
				content: "两次输入的密码不一致",
				showCancel: false,
				confirmText: "知道了"
			})
			return
		}

		// 校验验证码长度
		if (regCaptcha.value.length != 4) {
			uni.showModal({
				content: "请输入4位验证码",
				showCancel: false,
				confirmText: "知道了"
			})
			return
		}

		regLoading.value = true

		const data = {
			"username": regUsername.value,
			"nickname": nickname.value,
			"password": regPassword.value,
			"password2": regPassword2.value,
			"captcha": regCaptcha.value
		}

		uni.showLoading({ title: "注册中" })

		uniIdCo.registerUser(data)
			.finally(() => {
				uni.hideLoading()
				regLoading.value = false
			})
			.then(e => {
				uni.showToast({
					title: '注册成功',
					icon: 'success'
				})
				// 注册成功后自动登录，跳转到首页
				setTimeout(() => {
					uni.switchTab({
						url: '/pages/index/index'
					})
				}, 1500)
			})
			.catch((err : any | null) => {
				const error = err as UniCloudError
				console.error(error)
				uni.showToast({
					title: error.message,
					icon: 'none'
				})
			})
	}

	const socialLogin = (type : string) => {
		uni.showToast({ title: `${type}登录开发中`, icon: 'none' })
	}
	const goForget = () => {
		uni.navigateTo({
			url: "/uni_modules/uni-id-pages-x/pages/retrieve/retrieve"
		})
	}
	const goRegister = () => {
		isRegister.value = true
	}
	const goProtocol = (type : string) => {
		uni.showToast({ title: `${type}协议`, icon: 'none' })
	}
</script>

<style>
	.root {
		flex: 1;
		background: linear-gradient(to bottom right, #f8f9fc, #eef0f8);
	}

	.container {
		justify-content: center;
		align-items: center;
		padding: 40rpx;
		flex: 1;
	}

	/* Logo */
	.logo-container {
		align-items: center;
		margin-bottom: 80rpx;
	}

	.logo-text {
		font-size: 56rpx;
		font-weight: bold;
		color: #3a397a;
		letter-spacing: 2rpx;
	}

	/* 表单 */
	.login-form {
		width: 100%;
		max-width: 800rpx;
		background: linear-gradient(to bottom, #fff, #f8f9fc);
		border-radius: 40rpx;
		padding: 60rpx;
		border: 2rpx solid #e6e9f0;
	}

	/* tab切换样式 */
	.tab-switch {
		flex-direction: row;
		justify-content: center;
		margin-bottom: 60rpx;
		background-color: #f0f2f7;
		border-radius: 24rpx;
		padding: 8rpx;
	}

	.tab-item {
		flex: 1;
		text-align: center;
		padding: 20rpx 0;
		font-size: 32rpx;
		color: #6c757d;
		border-radius: 16rpx;
		transition: all 0.3s;
	}

	.tab-item.active {
		background: linear-gradient(to bottom right, #3a397a, #4f4e8c);
		color: #fff;
		font-weight: bold;
	}

	.form-group {
		margin-bottom: 48rpx;
	}

	.form-label {
		font-size: 32rpx;
		color: #3a397a;
		margin-bottom: 16rpx;
		font-weight: bold;
	}

	.input-wrap {
		position: relative;
	}

	.form-input {
		width: 100%;
		padding: 20rpx 32rpx 20rpx 80rpx;
		border-radius: 24rpx;
		border: 2rpx solid #e6e9f0;
		background-color: #f8f9fc;
		font-size: 32rpx;
	}

	.input-icon {
		position: absolute;
		left: 20rpx;
		top: 50%;
		transform: translateY(-50%);
		font-size: 40rpx;
		color: #6c757d;
		z-index: 1;
	}

	.forgot {
		flex-direction: row;
		justify-content: space-between;
		align-items: center;
	}

	.remember-me {
		flex-direction: row;
		align-items: center;
		font-size: 28rpx;
		color: #6c757d;
	}

	.forgot-password {
		font-size: 28rpx;
		color: #3a397a;
		font-weight: bold;
	}

	.login-button {
		width: 100%;
		background: linear-gradient(to bottom right, #3a397a, #4f4e8c);
		color: #fff;
		border-radius: 24rpx;
		font-size: 36rpx;
		font-weight: bold;
		border: 2rpx solid #2f2e62;
		margin-bottom: 48rpx;
	}

	.divider {
		flex-direction: row;
		align-items: center;
		margin-bottom: 48rpx;
	}

	.divider-line {
		flex: 1;
		height: 2rpx;
		background-color: #e6e9f0;
	}

	.divider-text {
		padding: 0 32rpx;
		font-size: 28rpx;
		color: #6c757d;
	}

	.social-login {
		flex-direction: row;
		justify-content: center;
		margin-bottom: 60rpx;
	}

	.social-icon {
		width: 100rpx;
		height: 100rpx;
		border-radius: 50rpx;
		background-color: #f8f9fc;
		border: 2rpx solid #e6e9f0;
		justify-content: center;
		align-items: center;
		margin: 0 20rpx;
	}

	.icon {
		font-size: 48rpx;
	}

	.register-link-forgot {
		flex-direction: row;
		justify-content: space-between;
		align-items: center;
	}

	.register-link {
		flex-direction: row;
	}

	.register-link-text {
		text-align: center;
		font-size: 28rpx;
		color: #6c757d;
	}

	.privacy {
		margin-top: 40rpx;
		flex-direction: row;
		flex-wrap: wrap;
		width: 80%;
		justify-content: center;
	}

	.privacy-text {
		font-size: 24rpx;
		color: #6c757d;
	}

	.link {
		color: #3a397a;
		font-weight: bold;
	}
</style>