<template>
	<view class="exam-container">
		<scroll-view class="exam-container-scroll">
			<view class="exam-container-scroll-view">
				<view class="header-section">
					<view class="progress-info">
						<text class="question-counter">第 {{current+1}}/{{data.length}} 题</text>
						<text class="timer">{{countdown}}</text>
					</view>
				</view>

				<view class="question-indicator">
					<view class="indicator-header">
						<text class="indicator-title">答题卡</text>
						<view class="toggle-button" @click="open = !open">
							<text class="toggle-icon">{{ open ? '收起' : '展开' }}</text>
						</view>
					</view>

					<scroll-view :class="open ? 'scroll-view-expanded' : 'scroll-view'" :scroll-top="scrollTop"
						:show-scrollbar="false">
						<view :class="open ? 'indicator-grid-expanded' : 'indicator-grid'">
							<view @click="indicator_handleClick(index)"
								:class="current === index ? 'question-item-current' : item.select.length !== (0 as number) ? 'question-item-answered' : 'question-item'"
								v-for="(item, index) in data" :key="index">
								<text
									:class="current === index ? 'question-number-current' : item.select.length !== (0 as number) ? 'question-number-answered' : 'question-number'">{{index + 1}}</text>
							</view>
						</view>
					</scroll-view>
				</view>

				<view class="question-section" v-if="data.length">
					<view class="question-content">
						<text class="question-title">
							{{current+1}}. {{data[current].name}}
						</text>

						<view class="options-container">
							<view :class="['option-item', {'selected':data[current].select.includes(item)}]"
								v-for="(item, index) in data[current].options" :key="index"
								@click="selectItem_handleClick(item)">
								<text :class="['option-label', {'selected':data[current].select.includes(item)}]">
									{{serialStr.split('')[index]}}.
								</text>
								<text :class="['option-text', {'selected':data[current].select.includes(item)}]">
									{{item}}
								</text>
							</view>
						</view>
					</view>
				</view>

				<view class="navigation-buttons">
					<button class="prev-button" @click="handlePrev" v-if="current!==(0 as number)">
						上一题
					</button>

					<button class="next-button" v-if="current < data.length - 1" @click="handleNext">
						下一题
					</button>

					<button :disabled="(!data.every((o):boolean=>o.select.length!==(0 as number)))"
						class="submit-button" v-else @click="handleSubmit">
						提交答卷
					</button>
				</view>

				<view class="spacer"></view>
			</view>
		</scroll-view>

	</view>
</template>

<script setup lang="uts">
	import { ref, watch, onMounted, onBeforeUnmount } from 'vue'
	import { DataType, dataList } from '@/assets/mock/simulate.data.uts'

	// 题目列表
	const data = ref<DataType[]>([])

	// 当前页数
	const current = ref<number>(0)

	// 分页器是否展开
	const open = ref<boolean>(true)

	// 指示器滚动高度
	const scrollTop = ref<number>(0)

	// 倒计时剩余时间 单位ms
	const countdownTime = ref<number>(0)
	const countdown = ref<string>("10:00")
	let interval : number = 0

	// 是否自动排序
	const isSerial = ref<boolean>(true)
	const serialStr : string = 'ABCDEFGHIJKLNMOPQRSTUVWXYZ'

	/**
	 * @description 每切换题目时请求接口更新题的数据
	 * @param current
	 */
	const update = (current : number) => {
		console.log('题目下标', current)
		console.log('题目答案', data.value[current].select)
		// 请求接口
	}

	/**
	 * @description 提交答题
	 */
	const submit = () => {
		console.log('全部数据', data.value)
		console.log('答案数据', data.value.map((o) => o.select))
		// 请求接口
		// 提交后退出页面或者do something
		// 后端看需求 定时器自动提交
	}

	// 以上可以自行编辑
	// -----分 割 线-----
	// 以下为固定写法 有能力者修改

	const getRemainingTime = (milliseconds : number) : string => {
		// 计算剩余时间
		let seconds = Math.floor(milliseconds / 1000)
		let minutes = Math.floor(seconds / 60)

		// 格式化为两位数
		let formattedMinutes = minutes.toString().padStart(2, '0')
		let formattedSeconds = (seconds % 60).toString().padStart(2, '0')

		// 返回剩余时间格式
		return `${formattedMinutes}:${formattedSeconds}`
	}

	const setScrollTop = (index : number) => {
		const num = Math.floor(index / 5)
		scrollTop.value = (70 + 20) * num
	}

	const handlePrev = () => {
		const firstCurrent : number = 0
		if (current.value === firstCurrent) {
			current.value = 0
		} else {
			current.value = current.value - 1
		}
		setScrollTop(current.value)
	}

	const handleNext = () => {
		if (current.value !== data.value.length - 1) {
			current.value = current.value + 1
		}
		setScrollTop(current.value)
	}

	const handleSubmit = () => {
		uni.showModal({
			title: '确认提交',
			content: '确认提交答卷吗？提交后无法修改',
			success: (e) => {
				if (e.confirm) {
					console.log('handleSubmit')
					submit()
				}
			}
		})
	}

	const handleClick = () => {
		if (current.value < data.value.length - 1) {
			handleNext()
		} else {
			handleSubmit()
		}
	}

	const selectItem_handleClick = (value : string) => {
		let select : string[] = data.value[current.value].select
		if (select.some((v : string) => v === value)) {
			// select.splice(index, 1)
			select = select.filter(v => v !== value)
		} else {
			select.push(value)
		}
		data.value[current.value].select = [...select]
	}

	const indicator_handleClick = (index : number) => {
		current.value = index
	}

	// 初始化数据
	onMounted(() => {
		dataList.forEach((item : DataType) => {
			data.value.push(item)
		})
		// countdownTime.value = 后端计算得到的倒计时
		countdownTime.value = 600 * 1000

		interval = setInterval(() => {
			if (countdownTime.value < 0) {
				// 倒计时结束 直接提交
				submit()
				clearInterval(interval)
				return
			}
			// 时间格式转换
			countdown.value = getRemainingTime(countdownTime.value)
			countdownTime.value -= 200
		}, 200)
	})

	// 清理定时器
	onBeforeUnmount(() => {
		clearInterval(interval)
	})

	// 监听current变化
	watch(current, (_newValue : number, oldValue : number) => {
		update(oldValue)
	})
</script>

<style>
	.exam-container {
		flex: 1;
		background-color: #f5f7fa;
	}

	.exam-container-scroll {
		flex: 1;
	}

	.exam-container-scroll-view {
		padding: 20rpx;
	}

	.header-section {
		background-color: #ffffff;
		border-radius: 20rpx;
		padding: 30rpx;
		margin-bottom: 20rpx;
	}

	.logo-container {
		align-items: center;
		margin-bottom: 30rpx;
	}

	.logo-image {
		width: 160rpx;
		height: 160rpx;
	}

	.progress-info {
		flex-direction: row;
		justify-content: space-between;
		align-items: center;
	}

	.question-counter {
		font-size: 32rpx;
		font-weight: bold;
		color: #333333;
	}

	.timer {
		font-size: 32rpx;
		font-weight: bold;
		color: #ff6b6b;
		background-color: #fff5f5;
		padding: 10rpx 20rpx;
		border-radius: 30rpx;
	}

	.question-indicator {
		background-color: #ffffff;
		border-radius: 20rpx;
		padding: 30rpx;
		margin-bottom: 20rpx;
	}

	.indicator-header {
		flex-direction: row;
		justify-content: space-between;
		align-items: center;
		margin-bottom: 20rpx;
	}

	.indicator-title {
		font-size: 36rpx;
		font-weight: bold;
		color: #333333;
	}

	.toggle-button {
		background-color: #f0f2f5;
		padding: 10rpx 20rpx;
		border-radius: 30rpx;
	}

	.toggle-icon {
		font-size: 28rpx;
		color: #666666;
	}

	.scroll-view {
		height: 80rpx;
	}

	.scroll-view-expanded {
		height: 300rpx;
	}

	.indicator-grid {
		flex-direction: row;
		flex-wrap: wrap;
		height: 80rpx;
		transition: all 0.3s;
	}

	.indicator-grid-expanded {
		flex-direction: row;
		flex-wrap: wrap;
		height: auto;
		transition: all 0.3s;
	}

	.question-item-current {
		width: 70rpx;
		height: 70rpx;
		border-radius: 16rpx;
		background-color: #f0f2f5;
		border: 2rpx solid #3a397a;
		margin-right: 20rpx;
		margin-bottom: 20rpx;
		align-items: center;
		justify-content: center;
		flex-shrink: 0;
	}

	.question-item-answered {
		width: 70rpx;
		height: 70rpx;
		border-radius: 16rpx;
		background-color: #3a397a;
		border: 2rpx solid #3a397a;
		margin-right: 20rpx;
		margin-bottom: 20rpx;
		align-items: center;
		justify-content: center;
	}

	.question-item {
		width: 70rpx;
		height: 70rpx;
		border-radius: 16rpx;
		background-color: #f0f2f5;
		border: 2rpx solid #f0f2f5;
		margin-right: 20rpx;
		margin-bottom: 20rpx;
		align-items: center;
		justify-content: center;
	}

	.question-number-current {
		font-size: 28rpx;
		color: #3a397a;
	}

	.question-number-answered {
		font-size: 28rpx;
		color: #f0f2f5;
	}

	.question-number {
		font-size: 28rpx;
		color: #666666;
	}

	.question-section {
		background-color: #ffffff;
		border-radius: 20rpx;
		padding: 30rpx;
		margin-bottom: 20rpx;
	}

	.question-content {
		flex: 1;
	}

	.question-title {
		font-size: 36rpx;
		font-weight: bold;
		color: #333333;
		line-height: 50rpx;
		margin-bottom: 30rpx;
	}

	.options-container {
		flex: 1;
	}

	.option-item {
		flex-direction: row;
		align-items: center;
		padding: 30rpx;
		margin-bottom: 20rpx;
		border-radius: 16rpx;
		background-color: #f9fafc;
		border: 2rpx solid #e4e6eb;
	}

	.option-item.selected {
		background-color: #f0f3ff;
		border: 2rpx solid #3a397a;
	}

	.option-label {
		font-size: 32rpx;
		font-weight: bold;
		color: #666666;
		width: 50rpx;
		margin-right: 20rpx;
	}

	.option-label.selected {
		color: #3a397a;
	}

	.option-text {
		flex: 1;
		font-size: 32rpx;
		color: #333333;
		line-height: 44rpx;
	}

	.option-text.selected {
		color: #3a397a;
		font-weight: bold;
	}

	.navigation-buttons {
		flex-direction: row;
		justify-content: space-between;
		margin-bottom: 20rpx;
	}

	.prev-button {
		flex: 1;
		height: 88rpx;
		border-radius: 44rpx;
		font-size: 32rpx;
		font-weight: bold;
		border: none;
		margin: 0 10rpx;
		background-color: #ffffff;
		color: #606266;
	}

	.next-button {
		flex: 1;
		height: 88rpx;
		border-radius: 44rpx;
		font-size: 32rpx;
		font-weight: bold;
		border: none;
		margin: 0 10rpx;
		background-color: #3a397a;
		color: #ffffff;
	}

	.submit-button {
		flex: 1;
		height: 88rpx;
		border-radius: 44rpx;
		font-size: 32rpx;
		font-weight: bold;
		border: none;
		margin: 0 10rpx;
		background: linear-gradient(to bottom right, #ff6b6b, #ff8e53);
		color: #ffffff;
	}

	.spacer {
		height: 20rpx;
	}
</style>