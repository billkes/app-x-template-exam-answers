<template>
	<scroll-view class="page">
		<!-- 头部信息 -->
		<view class="header">
			<view class="title-row">
				<text class="title">📝 前端开发工程师认证考试</text>
			</view>
			<view class="info-row">
				<text class="info-row-text">考试时间: 120分钟</text>
				<text class="info-row-text">剩余时间: {{ formattedTime }}</text>
			</view>
			<view class="progress-wrap">
				<view class="progress-bar">
					<view class="progress-fill" :style="{ width: progress + '%' }" />
				</view>
				<view class="progress-info">
					<text class="progress-info-text">已完成 {{ progress }}%</text>
					<text class="progress-info-text">{{ answered }}/{{ questions.length }} 题</text>
				</view>
			</view>
		</view>

		<!-- 答题卡：可展开收起 -->
		<view class="card">
			<view class="card-header" @tap="toggleExpand">
				<text class="card-title">🔢 答题卡</text>
				<text class="arrow" :class="{ up: expanded }">▼</text>
			</view>

			<view v-if="expanded" class="card-body">
				<view class="grid">
					<view v-for="(item, idx) in questions.length" :key="idx"
						:class="questions[idx].id === current ? 'btn-current' : isAnswered(idx) ? 'btn-answered' : 'btn'"
						@tap="handleJump(idx)">
						<text
							:class="questions[idx].id === current ? 'btn-text-current' : isAnswered(idx) ? 'btn-text-answered' : 'btn-text'">{{ item }}</text>
					</view>
				</view>
			</view>
		</view>

		<!-- 题目区域 -->
		<view class="question-card">
			<view class="question-header">
				<text class="type">{{ questionType }}</text>
				<text class="score">{{ questionScore }}</text>
			</view>
			<text class="question-text">
				{{ questions.findIndex(q=>q.id === current) + 1 }}. {{ stem }}
			</text>

			<!-- 选项 -->
			<view class="options">
				<view v-for="(opt, idx) in options" :key="idx" class="option"
					:class="{ selected: isSelected(optKey[idx])  }" @tap="handleSelect(optKey[idx])">
					<view class="marker">
						<text class="marker-text">
							{{ optKey[idx] }}
						</text>
					</view>
					<text class="text">{{ opt }}</text>
					<!-- 多选题选中标记 -->
					<view v-if="currentQuestion.type === 'multiple' && isSelected(optKey[idx])"
						class="multi-select-mark">
						<text class="multi-select-mark-text">✓</text>
					</view>
				</view>
			</view>

			<!-- 底部按钮 -->
			<view class="footer">
				<button class="custom-btn btn-prev" @tap="handlePrev">上一题</button>
				<button v-if="questions.findIndex(q=>q.id === current) < questions.length - 1"
					class="custom-btn btn-next" @tap="handleNext">下一题</button>
				<button v-else class="custom-btn btn-submit" @tap="handleSubmit">提交试卷</button>
			</view>
		</view>
	</scroll-view>
</template>

<script setup lang="uts">
	import { ref, computed, onMounted, onBeforeUnmount } from 'vue'
	import { dataList } from "@/assets/mock/simulate-v5.data.uts"
	import { Question } from "@/assets/type/exam.type.uts"

	// 基础数据
	const current = ref('')
	const answered = ref(0) // 已答
	const userAnswers = ref<Map<string, string[]>>(new Map())// 用户答案记录
	const currentAnswers = ref<string[]>([])// 当前题目答案

	// 获取当前题目的用户答案
	const getCurrentUserAnswers = () => {
		const list = userAnswers.value.get(current.value)
		return list === null ? [] : list
	}

	// 倒计时相关
	// const examDuration = 120 * 60 // 考试总时长(秒)
	const examDuration = 100 // 考试总时长(秒)
	const remainingTime = ref(examDuration) // 剩余时间(秒)
	let timer : number | null = null

	// 格式化时间显示
	const formattedTime = computed(() => {
		const hours = Math.floor(remainingTime.value / 3600)
		const minutes = Math.floor((remainingTime.value % 3600) / 60)
		const seconds = remainingTime.value % 60
		return `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`
	})

	// 展开收起
	const expanded = ref(false)
	const toggleExpand = () => {
		expanded.value = !expanded.value
	}

	// 模拟题目数据
	const questions = ref<Question[]>(dataList)

	// 当前题目信息
	const currentQuestion = computed(() : Question => {
		const obj = questions.value.find(q => q.id === current.value)
		return obj === null ? questions.value[0] : obj
	})
	const progress = computed(() => Math.round((answered.value / questions.value.length) * 100))

	const stem = computed(() => currentQuestion.value.stem)
	const options = computed(() => currentQuestion.value.options)
	const optKey = computed(() => ['A', 'B', 'C', 'D', 'E', 'F', 'G'].slice(0, options.value.length))
	const questionType = computed(() => currentQuestion.value.type === 'single' ? '单选题' : '多选题')
	const questionScore = computed(() => `本题分值: ${currentQuestion.value.score}分`)

	const isAnswered = (idx : number) => {
		const id = questions.value[idx].id
		const list = userAnswers.value.get(id)
		return list !== null && list.length > 0
	}

	// 更新已答题数量
	const updateAnsweredCount = () => {
		let num : number = 0
		userAnswers.value.forEach((value : string[]) => {
			if (value.length > 0) {
				num++;
			}
		})
		answered.value = num
	}

	// 跳转
	const handleJump = (idx : number) => {
		current.value = questions.value[idx].id
		// 加载该题目的用户答案
		currentAnswers.value = getCurrentUserAnswers()
	}

	// 选择
	const handleSelect = (key : string) => {
		if (currentQuestion.value.type === 'single') {
			// 单选题直接替换
			currentAnswers.value = [key]
		} else {
			// 多选题切换选中状态
			const index = currentAnswers.value.indexOf(key)
			if (index > -1) {
				currentAnswers.value.splice(index, 1)
			} else {
				currentAnswers.value.push(key)
			}
		}

		// 保存答案
		userAnswers.value.set(current.value, [...currentAnswers.value])
		updateAnsweredCount()
	}

	// 检查选项是否被选中
	const isSelected = (key : string) => {
		return currentAnswers.value.includes(key)
	}

	// 上一题 / 下一题 / 提交
	const handlePrev = () => {
		const index = questions.value.findIndex(q => q.id === current.value)
		if (index > 1) {
			handleJump(index - 1)
		}
	}

	const handleNext = () => {
		const index = questions.value.findIndex(q => q.id === current.value)
		if (index < questions.value.length) {
			handleJump(index + 1)
		}
	}

	// 停止计时器
	const stopTimer = () => {
		const currentTimer = timer
		if (currentTimer !== null) {
			clearInterval(currentTimer)
			timer = null
		}
	}

	const handleTimeout = () => {
		stopTimer()
		uni.showModal({
			title: '时间到',
			content: '系统已自动交卷',
			confirmText: '查看成绩',
			success: () => {
				// 这里可以跳转到成绩页面
			}
		})
	}

	// 开始计时器
	const startTimer = () => {
		if (timer !== null) return
		timer = setInterval(() => {
			remainingTime.value--
			if (remainingTime.value <= 0) {
				handleTimeout()
			}
		}, 1000)
	}

	const handleSubmit = () => {
		stopTimer()
		uni.showModal({
			title: '提示',
			content: '确认提交试卷？',
			success: (res) => {
				if (res.confirm) {
					uni.showToast({ title: '提交成功', icon: 'success' })
				} else {
					startTimer() // 取消提交则重新开始计时
				}
			}
		})
	}

	/**
	 * 页面挂载完成钩子
	 */
	onMounted(() => {
		// 初始化第一题的答案
		if (questions.value.length !== (0 as number)) {
			current.value = questions.value[0].id
		}
		currentAnswers.value = getCurrentUserAnswers()
		startTimer()
	})

	/**
	 * 页面卸载后
	 */
	onBeforeUnmount(() => {
		stopTimer()
	})
</script>

<style>
	/* 仅支持 flex，主题色 #5250b3 */
	.page {
		flex-direction: column;
		padding: 16px;
		flex: 1;
		background-color: #f5f7fa;
	}

	.header {
		padding: 16px;
		background: linear-gradient(to bottom right, #5250b3, #3a3899);
		border-radius: 12px;
		margin-bottom: 16px;
	}

	.title-row {
		margin-bottom: 8px;
	}

	.title {
		color: #fff;
		font-size: 18px;
		font-weight: 700;
	}

	.info-row {
		flex-direction: row;
		justify-content: space-between;
		margin-bottom: 12px;
	}

	.info-row-text {
		color: #fff;
		font-size: 13px;
	}

	.progress-wrap {
		margin-top: 5px;
	}

	.progress-bar {
		height: 6px;
		width: 100%;
		background-color: #eee;
		border-radius: 3px;
	}

	.progress-fill {
		height: 100%;
		background-color: #999;
		border-radius: 3px;
	}

	.progress-info {
		flex-direction: row;
		justify-content: space-between;
		margin-top: 6px;
	}

	.progress-info-text {
		font-size: 12px;
		color: #fff;
	}

	/* 答题卡 */
	.card {
		background-color: #fff;
		border-radius: 12px;
		margin-bottom: 16px;
		padding: 0 12px;
	}

	.card-header {
		flex-direction: row;
		justify-content: space-between;
		align-items: center;
		padding: 12px 0;
	}

	.card-title {
		font-size: 15px;
		font-weight: 700;
		color: #5250b3;
	}

	.arrow {
		font-size: 12px;
		transition: all 0.2s;
	}

	.arrow.up {
		transform: rotate(180deg);
	}

	.card-body {
		padding-bottom: 12px;
	}

	.grid {
		flex-direction: row;
		flex-wrap: wrap;
	}

	.btn {
		width: 36px;
		height: 36px;
		border-radius: 6px;
		border-width: 1px;
		align-items: center;
		justify-content: center;
		margin-right: 5px;
		margin-bottom: 5px;
		background-color: #f0f2f5;
		border-color: #e4e6eb;
	}

	.btn-answered {
		width: 36px;
		height: 36px;
		border-radius: 6px;
		border-width: 1px;
		align-items: center;
		justify-content: center;
		margin-right: 5px;
		margin-bottom: 5px;
		background-color: #d0d7ff;
		border-color: #b8c2ff;
	}

	.btn-current {
		width: 36px;
		height: 36px;
		border-radius: 6px;
		border-width: 1px;
		align-items: center;
		justify-content: center;
		margin-right: 5px;
		margin-bottom: 5px;
		background-color: #5250b3;
		border-color: #5250b3;
	}

	.btn-text {
		font-size: 14px;
		color: #333;
	}

	.btn-text-current {
		font-size: 14px;
		color: #fff;
	}

	.btn-text-answered {
		font-size: 14px;
		color: #2a3360;
	}

	/* 题目卡片 */
	.question-card {
		background-color: #fff;
		border-radius: 12px;
		padding: 16px;
	}

	.question-header {
		flex-direction: row;
		justify-content: space-between;
		margin-bottom: 16px;
		padding-bottom: 12px;
		border-bottom-width: 1px;
		border-bottom-color: #eee;
	}

	.type {
		background-color: #5250b3;
		color: #fff;
		padding: 2px 8px;
		border-radius: 12px;
		font-size: 12px;
	}

	.score {
		color: #ff6b6b;
		font-size: 13px;
		font-weight: 700;
	}

	.question-text {
		font-size: 16px;
		line-height: 24px;
		margin-bottom: 20px;
	}

	/* 选项 */
	.options {
		margin-bottom: 20px;
	}

	/* 多选题选中标记 */
	.multi-select-mark {
		position: absolute;
		right: 12px;
		width: 20px;
		height: 20px;
		border-radius: 10px;
		background-color: #5250b3;
	}

	.multi-select-mark-text {
		color: white;
		text-align: center;
		line-height: 20px;
		font-size: 12px;
	}

	.option {
		flex-direction: row;
		align-items: center;
		padding: 14px;
		flex: 1;
		box-sizing: border-box;
		margin-bottom: 10px;
		border-radius: 8px;
		background-color: #f9fafc;
		border-width: 1px;
		border-color: #e4e6eb;
		position: relative;
	}

	.option.selected {
		background-color: #f0f3ff;
		border-color: #b8c2ff;
	}

	.marker {
		width: 24px;
		height: 24px;
		border-radius: 12px;
		background-color: #e4e6eb;
		align-items: center;
		justify-content: center;
		margin-right: 12px;
		flex-shrink: 0;
	}

	.marker-text {
		font-weight: 700;
		font-size: 13px;
	}

	.option.selected .marker {
		background-color: #5250b3;
	}

	.option.selected .marker-text {
		color: #fff;
	}

	.text {
		font-size: 15px;
		color: #333;
		flex: 1;
	}

	/* 底部按钮 */
	.footer {
		flex-direction: row;
	}

	.custom-btn {
		flex: 1;
		padding: 8px 0;
		border-radius: 8px;
		font-size: 15px;
		font-weight: 700;
		text-align: center;
		border-width: 0;
	}

	.btn-prev {
		background-color: #f0f2f5;
		color: #606266;
		margin-right: 5px;
	}

	.btn-next {
		background-color: #5250b3;
		color: #fff;
	}

	.btn-submit {
		background: linear-gradient(to bottom right, #5250b3, #3a3899);
		color: #fff;
	}
</style>