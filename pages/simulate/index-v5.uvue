<template>
	<view class="page">
		<!-- 页面容器：滚动视图 -->
		<scroll-view class="page-scroll">
			<view class="page-scroll-view">
				<!-- 头部信息区域 -->
				<view class="header">
					<!-- 标题行 -->
					<view class="title-row">
						<text class="title">📝 前端开发工程师认证考试</text>
					</view>

					<!-- 考试信息行 -->
					<view class="info-row">
						<text class="info-row-text">考试时间: 120分钟</text>
						<!-- 动态显示格式化后的剩余时间 -->
						<text class="info-row-text">剩余时间: {{ formattedTime }}</text>
					</view>

					<!-- 进度条区域 -->
					<view class="progress-wrap">
						<!-- 进度条背景 -->
						<view class="progress-bar">
							<!-- 动态进度填充条（根据progress计算宽度） -->
							<view class="progress-fill" :style="{ width: progress + '%' }" />
						</view>
						<!-- 进度信息 -->
						<view class="progress-info">
							<text class="progress-info-text">已完成 {{ progress }}%</text>
							<text class="progress-info-text">{{ answered }}/{{ questions.length }} 题</text>
						</view>
					</view>
				</view>

				<!-- 答题卡：可展开收起 -->
				<view class="card">
					<!-- 答题卡头部（点击可展开/收起） -->
					<view class="card-header" @tap="toggleExpand">
						<text class="card-title">🔢 答题卡</text>
						<!-- 动态旋转箭头（根据展开状态） -->
						<text class="arrow" :class="{ up: expanded }">▼</text>
					</view>

					<!-- 答题卡主体（展开时显示） -->
					<view v-if="expanded" class="card-body">
						<view class="grid">
							<!-- 遍历生成所有题目的答题卡按钮 -->
							<!-- 动态按钮样式：当前题/已答题/未答题 -->
							<view v-for="(item, idx) in questions.length" :key="idx" :class="questions[idx].id === current ? 'btn-current' : isAnswered(idx) ? 'btn-answered' :
								'btn'" @tap="handleJump(idx)">
								<!-- 按钮文本样式 -->
								<text
									:class="questions[idx].id === current ? 'btn-text-current' : isAnswered(idx) ? 'btn-text-answered' : 'btn-text'">{{ item }}</text>
							</view>
						</view>
					</view>
				</view>

				<!-- 题目区域 -->
				<view class="question-card" v-if="current !== ''">
					<!-- 题目头部信息 -->
					<view class="question-header">
						<!-- 显示题目类型（单选/多选） -->
						<text class="type">{{ questionType }}</text>
						<!-- 显示题目分值 -->
						<text class="score">{{ questionScore }}</text>
					</view>
					<!-- 题目文本（显示题号和题干） -->
					<text class="question-text">
						{{ questions.findIndex(q=>q.id === current) + 1 }}. {{ stem }}
					</text>

					<!-- 选项区域 -->
					<view class="options">
						<!-- 遍历生成选项 -->
						<!-- 动态选项样式（是否被选中） -->
						<view v-for="(opt, idx) in options" :key="idx" class="option"
							:class="{ selected: isSelected(optKey[idx]) }" @tap="handleSelect(optKey[idx])">
							<!-- 选项标记（A/B/C/D...） -->
							<view class="marker">
								<text class="marker-text">
									{{ optKey[idx] }}
								</text>
							</view>
							<!-- 选项文本内容 -->
							<text class="text">{{ opt }}</text>
							<!-- 多选题选中标记（只在多选题且选中时显示） -->
							<view v-if="currentQuestion.type === 'multiple' && isSelected(optKey[idx])"
								class="multi-select-mark">
								<text class="multi-select-mark-text">✓</text>
							</view>
						</view>
					</view>

					<!-- 底部按钮区域 -->
					<view class="footer">
						<!-- 上一题按钮 -->
						<button class="custom-btn btn-prev" @tap="handlePrev">上一题</button>
						<!-- 动态按钮：最后一题前显示"下一题"，最后一题显示"提交试卷" -->
						<button v-if="questions.findIndex(q=>q.id === current) < questions.length - 1"
							class="custom-btn btn-next" @tap="handleNext">下一题</button>
						<button v-else class="custom-btn btn-submit" @tap="handleSubmit">提交试卷</button>
					</view>
				</view>
			</view>
		</scroll-view>
	</view>
</template>

<script setup lang="uts">
	import { ref, computed, onMounted, onBeforeUnmount } from 'vue'
	import { dataList } from "@/assets/mock/simulate-v5.data.uts"
	import { Question } from "@/assets/type/exam.type.uts"

	// 当前显示的题目ID
	const current = ref('')
	// 已答题数量
	const answered = ref(0)
	// 用户答案映射表（题目ID -> 答案数组）
	const userAnswers = ref<Map<string, string[]>>(new Map())
	// 当前题目的答案数组
	const currentAnswers = ref<string[]>([])

	// 获取当前题目的用户答案
	const getCurrentUserAnswers = () => {
		const list = userAnswers.value.get(current.value)
		return (list !== null && Array.isArray(list)) ? list : []
	}

	// 考试时长设置（秒）
	// const examDuration = 120 * 60 // 实际考试时间（2小时）
	const examDuration = 100 // 测试用时间（100秒）
	// 剩余时间（秒）
	const remainingTime = ref(examDuration)
	// 计时器引用
	let timer : number | null = null

	// 计算属性：格式化显示时间（HH:MM:SS）
	const formattedTime = computed(() => {
		const hours = Math.floor(remainingTime.value / 3600)
		const minutes = Math.floor((remainingTime.value % 3600) / 60)
		const seconds = remainingTime.value % 60
		return `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`
	})

	// 答题卡展开/收起状态
	const expanded = ref(false)
	// 切换答题卡展开状态
	const toggleExpand = () => {
		expanded.value = !expanded.value
	}

	// 题目列表（从mock数据导入）
	const questions = ref<Question[]>(dataList)

	// 计算属性：当前题目对象
	const currentQuestion = computed(() : Question => {
		const obj = questions.value.find(q => q.id === current.value)
		return obj === null ? questions.value[0] : obj
	})
	// 计算属性：答题进度百分比
	const progress = computed(() => Math.round((answered.value / questions.value.length) * 100))

	// 当前题目的题干/选项/选项字母标记/类型/分值计算属性
	const stem = computed(() => currentQuestion.value.stem)
	const options = computed(() => currentQuestion.value.options)
	const optKey = computed(() => ['A', 'B', 'C', 'D', 'E', 'F', 'G'].slice(0, options.value.length))
	const questionType = computed(() => currentQuestion.value.type === 'single' ? '单选题' : '多选题')
	const questionScore = computed(() => `本题分值: ${currentQuestion.value.score}分`)

	// 判断指定索引的题目是否已回答
	const isAnswered = (idx : number) => {
		const id = questions.value[idx].id
		const list = userAnswers.value.get(id)
		return list !== null && Array.isArray(list) && list.length > 0
	}

	// 更新已答题数量（遍历答案映射表统计）
	const updateAnsweredCount = () => {
		let num : number = 0
		userAnswers.value.forEach((value : string[]) => {
			if (value.length > 0) {
				num++;
			}
		})
		answered.value = num
	}

	// 跳转到指定索引的题目
	const handleJump = (idx : number) => {
		current.value = questions.value[idx].id
		// 加载该题目的用户答案
		currentAnswers.value = getCurrentUserAnswers()
	}

	// 处理选项选择
	const handleSelect = (key : string) => {
		// 单选题处理逻辑
		if (currentQuestion.value.type === 'single') {
			// 直接替换为当前选项
			currentAnswers.value = [key]
		} else {
			// 多选题处理逻辑：切换选中状态
			const index = currentAnswers.value.indexOf(key)
			if (index > -1) {
				// 已选中则移除
				currentAnswers.value.splice(index, 1)
			} else {
				// 未选中则添加
				currentAnswers.value.push(key)
			}
		}

		// 保存当前题目答案到映射表
		userAnswers.value.set(current.value, [...currentAnswers.value])
		// 更新已答题数量统计
		updateAnsweredCount()
	}

	// 判断选项是否被选中
	const isSelected = (key : string) => {
		return currentAnswers.value.some(str => str === key)
	}

	// 切换到上一题
	const handlePrev = () => {
		const index = questions.value.findIndex(q => q.id === current.value)
		if (index > 1) {
			handleJump(index - 1)
		}
	}

	// 切换到下一题
	const handleNext = () => {
		const index = questions.value.findIndex(q => q.id === current.value)
		if (index < questions.value.length) {
			handleJump(index + 1)
		}
	}

	// 停止计时器
	const stopTimer = () => {
		const currentTimer = timer
		if (currentTimer !== null) {
			clearInterval(currentTimer)
			timer = null
		}
	}

	// 考试时间结束处理
	const handleTimeout = () => {
		stopTimer()
		uni.showModal({
			title: '时间到',
			content: '系统已自动交卷',
			confirmText: '查看成绩',
			success: () => {
				// 这里可以跳转到成绩页面
			}
		})
	}

	// 开始计时器（每秒更新）
	const startTimer = () => {
		if (timer !== null) return
		timer = setInterval(() => {
			remainingTime.value--
			if (remainingTime.value <= 0) {
				handleTimeout()
			}
		}, 1000)
	}

	// 提交试卷处理
	const handleSubmit = () => {
		stopTimer()
		uni.showModal({
			title: '提示',
			content: '确认提交试卷？',
			success: (res) => {
				if (res.confirm) {
					uni.showToast({ title: '提交成功', icon: 'success' })
				} else {
					startTimer() // 取消提交则重新开始计时
				}
			}
		})
	}

	/**
	 * 页面挂载完成钩子
	 */
	onMounted(() => {
		// 初始化第一题
		if (questions.value.length !== (0 as number)) {
			current.value = questions.value[0].id
			currentAnswers.value = getCurrentUserAnswers()
		}
		// 开始考试计时
		startTimer()
	})

	/**
	 * 页面卸载前钩子
	 */
	onBeforeUnmount(() => {
		// 清理计时器
		stopTimer()
	})
</script>

<style>
	/* 仅支持 flex，主题色 #5250b3 */
	.page {
		flex: 1;
		background-color: #f5f7fa;
	}

	.page-scroll {
		flex: 1;
	}

	.page-scroll-view {
		padding: 16px;
		flex-direction: column;
	}

	.header {
		padding: 16px;
		background: linear-gradient(to bottom right, #5250b3, #3a3899);
		border-radius: 12px;
		margin-bottom: 16px;
	}

	.title-row {
		margin-bottom: 8px;
	}

	.title {
		color: #fff;
		font-size: 18px;
		font-weight: 700;
	}

	.info-row {
		flex-direction: row;
		justify-content: space-between;
		margin-bottom: 12px;
	}

	.info-row-text {
		color: #fff;
		font-size: 13px;
	}

	.progress-wrap {
		margin-top: 5px;
	}

	.progress-bar {
		height: 6px;
		width: 100%;
		background-color: #eee;
		border-radius: 3px;
	}

	.progress-fill {
		height: 100%;
		background-color: #999;
		border-radius: 3px;
	}

	.progress-info {
		flex-direction: row;
		justify-content: space-between;
		margin-top: 6px;
	}

	.progress-info-text {
		font-size: 12px;
		color: #fff;
	}

	/* 答题卡 */
	.card {
		background-color: #fff;
		border-radius: 12px;
		margin-bottom: 16px;
		padding: 0 12px;
	}

	.card-header {
		flex-direction: row;
		justify-content: space-between;
		align-items: center;
		padding: 12px 0;
	}

	.card-title {
		font-size: 15px;
		font-weight: 700;
		color: #5250b3;
	}

	.arrow {
		font-size: 12px;
		transition: all 0.2s;
	}

	.arrow.up {
		transform: rotate(180deg);
	}

	.card-body {
		padding-bottom: 12px;
	}

	.grid {
		flex-direction: row;
		flex-wrap: wrap;
	}

	.btn {
		width: 36px;
		height: 36px;
		border-radius: 6px;
		border-width: 1px;
		align-items: center;
		justify-content: center;
		margin-right: 5px;
		margin-bottom: 5px;
		background-color: #f0f2f5;
		border-color: #e4e6eb;
	}

	.btn-answered {
		width: 36px;
		height: 36px;
		border-radius: 6px;
		border-width: 1px;
		align-items: center;
		justify-content: center;
		margin-right: 5px;
		margin-bottom: 5px;
		background-color: #d0d7ff;
		border-color: #b8c2ff;
	}

	.btn-current {
		width: 36px;
		height: 36px;
		border-radius: 6px;
		border-width: 1px;
		align-items: center;
		justify-content: center;
		margin-right: 5px;
		margin-bottom: 5px;
		background-color: #5250b3;
		border-color: #5250b3;
	}

	.btn-text {
		font-size: 14px;
		color: #333;
	}

	.btn-text-current {
		font-size: 14px;
		color: #fff;
	}

	.btn-text-answered {
		font-size: 14px;
		color: #2a3360;
	}

	/* 题目卡片 */
	.question-card {
		background-color: #fff;
		border-radius: 12px;
		padding: 16px;
	}

	.question-header {
		flex-direction: row;
		justify-content: space-between;
		margin-bottom: 16px;
		padding-bottom: 12px;
		border-bottom-width: 1px;
		border-bottom-color: #eee;
	}

	.type {
		background-color: #5250b3;
		color: #fff;
		padding: 2px 8px;
		border-radius: 12px;
		font-size: 12px;
	}

	.score {
		color: #ff6b6b;
		font-size: 13px;
		font-weight: 700;
	}

	.question-text {
		font-size: 16px;
		line-height: 24px;
		margin-bottom: 20px;
	}

	/* 选项 */
	.options {
		margin-bottom: 20px;
	}

	/* 多选题选中标记 */
	.multi-select-mark {
		position: absolute;
		right: 12px;
		width: 20px;
		height: 20px;
		border-radius: 10px;
		background-color: #5250b3;
	}

	.multi-select-mark-text {
		color: white;
		text-align: center;
		line-height: 20px;
		font-size: 12px;
	}

	.option {
		flex-direction: row;
		align-items: center;
		padding: 14px;
		flex: 1;
		box-sizing: border-box;
		margin-bottom: 10px;
		border-radius: 8px;
		background-color: #f9fafc;
		border-width: 1px;
		border-color: #e4e6eb;
		position: relative;
	}

	.option.selected {
		background-color: #f0f3ff;
		border-color: #b8c2ff;
	}

	.marker {
		width: 24px;
		height: 24px;
		border-radius: 12px;
		background-color: #e4e6eb;
		align-items: center;
		justify-content: center;
		margin-right: 12px;
		flex-shrink: 0;
	}

	.marker-text {
		font-weight: 700;
		font-size: 13px;
	}

	.option.selected .marker {
		background-color: #5250b3;
	}

	.option.selected .marker-text {
		color: #fff;
	}

	.text {
		font-size: 15px;
		color: #333;
		flex: 1;
	}

	/* 底部按钮 */
	.footer {
		flex-direction: row;
	}

	.custom-btn {
		flex: 1;
		padding: 8px 0;
		border-radius: 8px;
		font-size: 15px;
		font-weight: 700;
		text-align: center;
		border-width: 0;
	}

	.btn-prev {
		background-color: #f0f2f5;
		color: #606266;
		margin-right: 5px;
	}

	.btn-next {
		background-color: #5250b3;
		color: #fff;
	}

	.btn-submit {
		background: linear-gradient(to bottom right, #5250b3, #3a3899);
		color: #fff;
	}
</style>